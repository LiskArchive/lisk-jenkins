#!/usr/bin/groovy
properties([
  parameters([
    string(defaultValue: "devnet-development", description: 'Branch / commit:', name: 'branch'),
    string(defaultValue: "devnet", description: 'Tag (devnet, devnet1, ...)', name: 'tag'),
    booleanParam(defaultValue: false, description: 'Append the commit SHA', name: 'commitsha'),
   ])
])
pipeline{
    agent {
        node {
            label 'lisk-docker'
            customWorkspace "workspace/${URLDecoder.decode(JOB_NAME)}/${BUILD_NUMBER}"
        }
    }
    stages {
        stage('Build release'){
            steps {
                script {
                    def buildEnv = dir('docker/lisk-build'){
                        return docker.build('lisk-build')
                    }
                    buildEnv.inside {
                        dir('lisk'){
                            checkout([$class: 'GitSCM', branches: [[name: "${params.branch}" ]],
                                userRemoteConfigs: [[url: 'https://github.com/LiskHQ/lisk']]])
                            sh """
                            npm install
                            node ./node_modules/.bin/grunt release
                            jq -r '.version' config.json > ".lisk-version"
                            git rev-parse --short HEAD > .git/commit-id
                            """
                        }
                        env.COMMIT = readFile("lisk/.git/commit-id").trim()
                        env.VERSION = readFile("lisk/.lisk-version").trim()
                        dir('lisk-build'){
                            git url: 'https://github.com/LiskHQ/lisk-build', branch: '1.0.0'
                            sh """
                            cp ../lisk/release/lisk-${env.VERSION}.tgz src/
                            bash build.sh -n dev -v "${env.VERSION}"
                            """
                        }
                    }
                }
            }
        }
        stage('Upload tarball'){
            steps {
                script {
                    def outputFile = params.commitsha ? "lisk-${env.VERSION}-${env.COMMIT}-Linux-x86_64.tar.gz" : "lisk-${env.VERSION}-Linux-x86_64.tar.gz"
                    dir("lisk-build") {
                        sh """
                        if [ ! -f release/${outputFile} ]; then
                            cd release
                            mv lisk-${env.VERSION}-Linux-x86_64.tar.gz ${outputFile}
                            sha256sum ${outputFile} > ${outputFile}.SHA256
                            cd ..
                        fi
                        s3cmd put --acl-public release/${outputFile}  s3:///lisk-releases/lisk-core/${params.tag}/${outputFile}
                        s3cmd put --acl-public release/${outputFile}.SHA256 s3:///lisk-releases/lisk-core/${params.tag}/${outputFile}.SHA256
                        """
                    }
                }
            }
        }
        stage('Clean WS') {
            steps {
                cleanWs()
            }
        }
    }
}
