@Library('lisk-jenkins') _

properties([
  parameters([
    string(defaultValue: "development", description: 'Commit-ish:', name: 'COMMITISH'),
    booleanParam(defaultValue: true, description: 'Append the commit SHA', name: 'COMMITSHA'),
    booleanParam(defaultValue: true, description: 'Use cache', name: 'USE_CACHE'),
   ])
])

pipeline {
    agent {
        node {
            label 'lisk-docker'
            customWorkspace "workspace/${URLDecoder.decode(JOB_NAME)}/${BUILD_NUMBER}"
        }
    }
    stages {
        stage('Build release') {
            steps {
                script {
                    def buildEnv = dir('docker/lisk-build'){
                        return docker.build('lisk-build')
                    }
                    buildEnv.inside("-v $HOME/cache:$HOME/cache") {
                        checkout([$class: 'GitSCM',
                                  branches: [[name: "${params.COMMITISH}" ]],
                                  userRemoteConfigs: [[url: 'https://github.com/LiskHQ/lisk']]])
                        if ( params.USE_CACHE ) {
                            cache_file = restoreCache("build/config.sh")
                        }
                        dir('build') {
                            ansiColor('xterm') {
                                sh 'make LISK_NETWORK=devnet'
                            }
                         }
                        if ( params.USE_CACHE ) {
                            saveCache(cache_file, 'build/src', 14, 'lisk-[0-9]*')
                        }
                    }
                }
            }
        }
        stage('Upload tarball') {
            steps {
                dir('build/release') {
                sh '''
                    VERSION=$( jq --raw-output '.version' ../../package.json )
                    OUTPUT_FILE="lisk-$VERSION-Linux-x86_64.tar.gz"
                    if [ "x$COMMITSHA" = "xtrue" ]; then
                        OUTPUT_FILE="lisk-$VERSION-$GIT_COMMIT-Linux-x86_64.tar.gz"
		        echo "$VERSION-$GIT_COMMIT" >.lisk_version
		    else
		        echo "$VERSION" >.lisk_version
                    fi

                    if [ ! -f "$OUTPUT_FILE" ]; then
                        tar xf "lisk-$VERSION-Linux-x86_64.tar.gz"
                        mv "lisk-$VERSION-Linux-x86_64" "lisk-$VERSION-$GIT_COMMIT-Linux-x86_64"
                        tar czf "$OUTPUT_FILE" "lisk-$VERSION-$GIT_COMMIT-Linux-x86_64"
                        sha256sum "$OUTPUT_FILE" >"$OUTPUT_FILE.SHA256"
                    fi

                    s3cmd put --acl-public "$OUTPUT_FILE" "s3://lisk-releases/lisk-core/$OUTPUT_FILE"
                    s3cmd put --acl-public "$OUTPUT_FILE.SHA256" "s3://lisk-releases/lisk-core/$OUTPUT_FILE.SHA256"
                    '''
		    script {
		      env.LISK_VERSION = readFile('.lisk_version').trim()
		    }
                }
            }
        }
    }
    post {
        success {
            script {
                cleanWs()
            }
        }
    }
}
// vim: filetype=groovy
